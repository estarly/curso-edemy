// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  //relationMode = "prisma"
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  designation    String?
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role          @default(USER)
  is_instructor  Boolean       @default(false)
  status         Int           @default(1) //0: inactive, 1: active, 2: deleted
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  accounts       Account[]
  profile        Profile?
  courses        Course[]
  favourites     Favourite[]
  enrolments     Enrolment[]
  reviews        Review[]
  StateCourse    StateCourse[]
}

model Profile {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  bio      String? @db.Text
  gender   String?
  address  String?
  phone    String?
  whatsapp String?
  countryId Int?
  website  String?
  twitter  String?
  facebook String?
  linkedin String?
  youtube  String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([countryId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String
  status     Int      @default(1)
  logo       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  courses Course[]
}

model Course {
  id                     Int      @id @default(autoincrement())
  userId                 Int
  categoryId             Int
  title                  String
  slug                   String
  description            String   @db.Text
  regular_price          Float
  before_price           Float
  lessons                String
  image                  String
  access_time            String
  requirements           String   @db.Text
  what_you_will_learn    String   @db.Text
  who_is_this_course_for String   @db.Text
  status                 Status   @default(Pending)
  is_module              Boolean  @default(false)
  in_home_page           Boolean  @default(false)
  in_home_page_set_at    DateTime @default(now())
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  favourites    Favourite[]
  enrolments    Enrolment[]
  assets        Asset[]
  reviews       Review[]
  courseModules CourseModule[]
  StateCourse   StateCourse[]

  @@index([userId])
  @@index([categoryId])
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?  @db.Text
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([userId, courseId])
  @@index([courseId])
}

model AssetType {
  id         Int      @id @default(autoincrement())
  name       String
  config     Json?
  status     Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  assets Asset[]
}

model Asset {
  id           Int      @id @default(autoincrement())
  courseId     Int
  assetTypeId  Int      @default(1)
  title        String
  description  String?  @db.Text
  file_url     String?
  video_url    String?
  video_length String?
  config_asset Json?
  is_preview   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assetType   AssetType     @relation(fields: [assetTypeId], references: [id])
  assignments Assignment[]
  statecourse StateCourse[]
  files       FilesAsset[]
  
  @@index([courseId])
  @@index([assetTypeId])
  @@index([courseId, assetTypeId])
}

model Module {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  logo        String?
  status      Int     @default(1)

  courseModules CourseModule[]
  enrolments    Enrolment[]
}

model CourseModule {
  courseId Int
  moduleId Int

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([courseId, moduleId])
  @@index([courseId])
  @@index([moduleId])
}

model Enrolment {
  id             Int           @id @default(autoincrement())
  userId         Int
  courseId       Int?
  moduleId       Int?
  order_number   String        @unique
  price          Int?
  paymentId      String?
  payment_status PaymentStatus @default(PENDING)
  status         PaymentStatus @default(PENDING)
  payment_via    String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module         Module?       @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([userId, courseId])
  @@index([userId, moduleId])
  @@index([courseId])
  @@index([moduleId])
}

model Favourite {
  id         Int      @id @default(autoincrement())
  userId     Int
  courseId   Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Banner {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  url         String?
  status      Int      @default(1)
  image       String?
  order       Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model AssignmentType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  config_type Json?
  status      Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  assignments Assignment[]
}

model Assignment {
  id                Int      @id @default(autoincrement())
  assetId           Int
  assignmentTypeId  Int
  title             String
  description       String?
  config_assignment Json?
  status            Int      @default(1)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  asset          Asset          @relation(fields: [assetId], references: [id])
  assignmenttype AssignmentType @relation(fields: [assignmentTypeId], references: [id])
  statecourse    StateCourse[]

  @@index([assetId])
  @@index([assignmentTypeId])
}

model StateCourse {
  id              Int      @id @default(autoincrement())
  userId          Int
  courseId        Int
  stateAsset      Boolean  @default(false)
  assetId         Int
  stateEvaluation Boolean  @default(false)
  assignmentId    Int?
  state           Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  assignmentresults AssignmentResults[]
  user              User                @relation(fields: [userId], references: [id])
  course            Course              @relation(fields: [courseId], references: [id])
  asset             Asset               @relation(fields: [assetId], references: [id])
  evaluation        Assignment?         @relation(fields: [assignmentId], references: [id])

  @@index([userId])
  @@index([courseId])
  @@index([assetId])
  @@index([assignmentId])
}

model AssignmentResults {
  id            Int      @id @default(autoincrement())
  stateCourseId Int
  response      Json
  complete      Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  statecourse StateCourse @relation(fields: [stateCourseId], references: [id])

  @@index([stateCourseId])
}

model FilesAsset {
  id      Int    @id @default(autoincrement())
  url     String
  assetId Int
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum Type {
  file
  video
}

enum Status {
  Pending
  Approved
  Deleted
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  HOLD
  FREE
}
